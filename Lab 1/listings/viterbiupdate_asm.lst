


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             myCode, CODE, READONLY
    2 00000000                 EXPORT           ViterbiUpdate_asm
    3 00000000         
    4 00000000         ;R0 = A pointer to vitpsi[:,t-1]
    5 00000000         ;R1 = A pointer to vitpsi[:,t]
    6 00000000         ;R2 = The observation
    7 00000000         ;R3 = A pointer to the hmm variables
    8 00000000         
    9 00000000         ViterbiUpdate_asm
                               FUNCTION
   10 00000000 E92D 1FF0       PUSH{R4-R12}
   11 00000004         ;SUB R0, #36
   12 00000004         ;SUB R1, #36
   13 00000004         ;SUB R3, #36
   14 00000004 681C            LDR              R4, [R3]    ;load number of sta
                                                            tes
   15 00000006 685D            LDR              R5, [R3,#4] ;load number of obs
                                                            ervation types
   16 00000008 F103 0608       ADD              R6, R3, #8  ;load address of tr
                                                            ansition
   17 0000000C         
   18 0000000C F04F 0704       MOV              R7, #4      ;4 bytes
   19 00000010 FB05 F807       MUL              R8, R5, R7  ;this is number of 
                                                            bytes times number 
                                                            of observation type
                                                            s
   20 00000014 FB04 F904       MUL              R9, R4, R4  ;get to offset to e
                                                            mission address
   21 00000018 FB09 F907       MUL              R9, R9, R7  ;get to offset to e
                                                            mission address
   22 0000001C EB06 0509       ADD              R5, R6, R9  ;get address of emi
                                                            ssion
   23 00000020         
   24 00000020 FB04 F807       MUL              R8, R4, R7  ;this is number of 
                                                            bytes times number 
                                                            of states
   25 00000024 F04F 3AFF       MOV              R10, #-1    ;this is the number
                                                             of states in the o
                                                            uter loop.
   26 00000028         bigOuterLoop
   27 00000028 F11A 0A01       ADDS             R10, #1
   28 0000002C 45A2            CMP              R10, R4
   29 0000002E D056            BEQ              doneBigOuterLoop
   30 00000030         getTransP
   31 00000030 F114 34FF       ADDS             R4, #-1
   32 00000034 2C00            CMP              R4, #0
   33 00000036 DB14            BLT              doneTransP
   34 00000038 FB04 F907       MUL              R9, R4, R7  ;jump amount for vi
                                                            t[:,t-1]
   35 0000003C EB10 0909       ADDS             R9, R0, R9  ;get address for ne
                                                            w position in vit
   36 00000040 ED99 0A00       VLDR.32          S0, [R9]    ;get the value in v
                                                            it[:,t-1]
   37 00000044 FB04 F908       MUL              R9, R4, R8  ; jump amount for t
                                                            ransition
   38 00000048 EB16 0909       ADDS             R9, R6, R9  ;get address for ne
                                                            w position in trans
                                                            ition
   39 0000004C FB0A FB07       MUL              R11, R10, R7 ;amount needed to 



ARM Macro Assembler    Page 2 


                                                            shift to correct co
                                                            lumn
   40 00000050 EB1B 0909       ADDS             R9, R11, R9 ;this shifts the ad
                                                            dress to the correc
                                                            t column of transit
                                                            ion
   41 00000054 EDD9 0A00       VLDR.32          S1, [R9]    ;get the next value
                                                             in transition
   42 00000058 EE20 1A20       VMUL.F32         S2, S0, S1  ;multiply the value
                                                            s
   43 0000005C ED2D 1A01       VPUSH{S2}                    ;store this value o
                                                            n the stack
   44 00000060 E7E6            B                getTransP
   45 00000062         doneTransP
   46 00000062 681C            LDR              R4, [R3]    ;reload number of s
                                                            tates
   47 00000064 ECFD 1A01       VPOP{S3}                     ;get trans_p[2]
   48 00000068 ED9F 5A2E       VLDR.F32         S10, = 0.0  ;this will have the
                                                             index of the max v
                                                            alue.
   49 0000006C EDDF 4A2D       VLDR.F32         S9, = 0.0   ;this will incremen
                                                            t by 1 at every loo
                                                            p iteration
   50 00000070 EEB7 4A00       VLDR.F32         S8, = 1.0   ;the amount to incr
                                                            ement by
   51 00000074         getMaxValue
   52 00000074 F114 34FF       ADDS             R4,#-1
   53 00000078 2C00            CMP              R4, #0
   54 0000007A D00D            BEQ              doneMaxValue
   55 0000007C ECBD 2A01       VPOP{S4}                     ;get trans_p[3,4...
                                                            n, and then lastly 
                                                            1]
   56 00000080 EE74 4A84       VADD.F32         S9,S9,S8    ;increment the coun
                                                            ter
   57 00000084 EEB4 2A61       VCMP.F32         S4,S3       ;compare this value
                                                             with current max v
                                                            alue
   58 00000088 EEF1 FA10       VMRS             APSR_nzcv, FPSCR
   59 0000008C DBF2            BLT              getMaxValue ;if the new number 
                                                            is less than the ma
                                                            x, go to beginning 
                                                            of loop
   60 0000008E EEF0 1A42       VMOV.F32         S3,S4       ;if the new number 
                                                            is greater than or 
                                                            equal, set that as 
                                                            the max.
   61 00000092 EEB0 5A64       VMOV.F32         S10, S9     ;also set the index
                                                             to the current loo
                                                            p counter
   62 00000096 E7ED            B                getMaxValue ;go to beginning of
                                                             loop
   63 00000098         doneMaxValue
   64 00000098 681C            LDR              R4, [R3]    ;reload number of s
                                                            tates
   65 0000009A FB04 F907       MUL              R9, R4, R7  ; number of states 
                                                            times number of byt
                                                            es
   66 0000009E EB11 0909       ADDS             R9, R1, R9  ;address for the be
                                                            ginning of psi



ARM Macro Assembler    Page 3 


   67 000000A2 FB0A FB07       MUL              R11, R10, R7 ;amount needed to 
                                                            get to correct posi
                                                            tion within psi (cu
                                                            rrent state number 
                                                            times number of byt
                                                            es)
   68 000000A6 EB1B 0909       ADDS             R9, R11, R9 ;shift to the corre
                                                            ct position within 
                                                            psi
   69 000000AA ED89 5A00       VSTR             S10, [R9]   ;store index in psi
                                                            
   70 000000AE FB0A FB07       MUL              R11, R10, R7 ;current state num
                                                            ber times number of
                                                             bytes
   71 000000B2 685C            LDR              R4, [R3,#4] ;load number of obs
                                                            ervation types
   72 000000B4 FB0B F404       MUL              R4, R11, R4 ;number of observat
                                                            ion types times sta
                                                            te number times num
                                                            ber of bytes
   73 000000B8 46A9            MOV              R9, R5      ;get address of emi
                                                            ssion
   74 000000BA EB14 0909       ADDS             R9, R4, R9  ;get the address of
                                                             the correct row
   75 000000BE FB02 FC07       MUL              R12, R2, R7 ;observation number
                                                             times number of by
                                                            tes
   76 000000C2 EB1C 0909       ADDS             R9, R12, R9 ;shift to the corre
                                                            ct column. This req
                                                            uires the observati
                                                            on input.
   77 000000C6 ED99 2A00       VLDR.32          S4, [R9]    ;load the emission 
                                                            entry
   78 000000CA EE61 1A82       VMUL.F32         S3, S3, S4  ;multiply the max v
                                                            alue by the emissio
                                                            n entry
   79 000000CE FB0A F907       MUL              R9, R10, R7 ;jump amount for vi
                                                            t[:,t]
   80 000000D2 EB11 0909       ADDS             R9, R1, R9  ;get address for ne
                                                            w position in vit
   81 000000D6 EDC9 1A00       VSTR             S3, [R9]    ;store the max valu
                                                            e in vit[s,t]
   82 000000DA 681C            LDR              R4, [R3]    ;reload the number 
                                                            of states
   83 000000DC E7A4            B                bigOuterLoop ;go back to beginn
                                                            ing of big loop 
   84 000000DE         doneBigOuterLoop
   85 000000DE ED9F 0A11       VLDR.F32         S0, =0.0
   86 000000E2         getSumOfVit
   87 000000E2 F114 34FF       ADDS             R4, #-1
   88 000000E6 2C00            CMP              R4, #0
   89 000000E8 DB08            BLT              doneSumOfVit
   90 000000EA FB04 F907       MUL              R9, R4, R7  ;jump amount for vi
                                                            t[:,t]
   91 000000EE EB11 0909       ADDS             R9, R1, R9  ;get address for ne
                                                            w position in vit
   92 000000F2 EDD9 0A00       VLDR.32          S1, [R9]    ;get the value in v
                                                            it[:,t]
   93 000000F6 EE30 0A80       VADD.F32         S0, S1, S0  ;add the value to t



ARM Macro Assembler    Page 4 


                                                            he cumulative sum
   94 000000FA E7F2            B                getSumOfVit
   95 000000FC         doneSumOfVit
   96 000000FC 681C            LDR              R4, [R3]    ;reload the number 
                                                            of states
   97 000000FE         divideByScale
   98 000000FE F114 34FF       ADDS             R4, #-1
   99 00000102 2C00            CMP              R4, #0
  100 00000104 DB0A            BLT              doneDivision
  101 00000106 FB04 F907       MUL              R9, R4, R7  ;jump amount for vi
                                                            t[:,t]
  102 0000010A EB11 0909       ADDS             R9, R1, R9  ;get address for ne
                                                            w position in vit
  103 0000010E EDD9 0A00       VLDR.32          S1, [R9]    ;get the value in v
                                                            it[:,t]
  104 00000112 EEC0 0A80       VDIV.F32         S1, S1, S0  ;divide the value b
                                                            y the scale factor
  105 00000116 EDC9 0A00       VSTR             S1, [R9]    ;store the value ba
                                                            ck in vit[:,t]
  106 0000011A E7F0            B                divideByScale
  107 0000011C         doneDivision
  108 0000011C E8BD 1FF0       POP{R4-R12}
  109 00000120 4770            BX               LR
  110 00000122                 ENDFUNC
  111 00000122                 end
              00 00 00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\object\viterbiupdate_asm.d -o.\object\viterbiupdate_asm.o -I"
E:\McGill5\ECSE426\Lab 1\RTE" -I"E:\McGill5\ECSE426\Lab 1\RTE\Device\STM32F407V
G" -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.4.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Ke
il\STM32F4xx_DFP\1.0.8\Device\Include --predefine="__EVAL SETA 1" --predefine="
__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 516" --predefine="_RTE_ 
SETA 1" --predefine="STM32F40_41xxx SETA 1" --list=.\listings\viterbiupdate_asm
.lst ViterbiUpdate_asm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ViterbiUpdate_asm 00000000

Symbol: ViterbiUpdate_asm
   Definitions
      At line 9 in file ViterbiUpdate_asm.s
   Uses
      At line 2 in file ViterbiUpdate_asm.s
Comment: ViterbiUpdate_asm used once
bigOuterLoop 00000028

Symbol: bigOuterLoop
   Definitions
      At line 26 in file ViterbiUpdate_asm.s
   Uses
      At line 83 in file ViterbiUpdate_asm.s
Comment: bigOuterLoop used once
divideByScale 000000FE

Symbol: divideByScale
   Definitions
      At line 97 in file ViterbiUpdate_asm.s
   Uses
      At line 106 in file ViterbiUpdate_asm.s
Comment: divideByScale used once
doneBigOuterLoop 000000DE

Symbol: doneBigOuterLoop
   Definitions
      At line 84 in file ViterbiUpdate_asm.s
   Uses
      At line 29 in file ViterbiUpdate_asm.s
Comment: doneBigOuterLoop used once
doneDivision 0000011C

Symbol: doneDivision
   Definitions
      At line 107 in file ViterbiUpdate_asm.s
   Uses
      At line 100 in file ViterbiUpdate_asm.s
Comment: doneDivision used once
doneMaxValue 00000098

Symbol: doneMaxValue
   Definitions
      At line 63 in file ViterbiUpdate_asm.s
   Uses
      At line 54 in file ViterbiUpdate_asm.s
Comment: doneMaxValue used once
doneSumOfVit 000000FC

Symbol: doneSumOfVit
   Definitions
      At line 95 in file ViterbiUpdate_asm.s
   Uses
      At line 89 in file ViterbiUpdate_asm.s
Comment: doneSumOfVit used once
doneTransP 00000062

Symbol: doneTransP



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 45 in file ViterbiUpdate_asm.s
   Uses
      At line 33 in file ViterbiUpdate_asm.s
Comment: doneTransP used once
getMaxValue 00000074

Symbol: getMaxValue
   Definitions
      At line 51 in file ViterbiUpdate_asm.s
   Uses
      At line 59 in file ViterbiUpdate_asm.s
      At line 62 in file ViterbiUpdate_asm.s

getSumOfVit 000000E2

Symbol: getSumOfVit
   Definitions
      At line 86 in file ViterbiUpdate_asm.s
   Uses
      At line 94 in file ViterbiUpdate_asm.s
Comment: getSumOfVit used once
getTransP 00000030

Symbol: getTransP
   Definitions
      At line 30 in file ViterbiUpdate_asm.s
   Uses
      At line 44 in file ViterbiUpdate_asm.s
Comment: getTransP used once
myCode 00000000

Symbol: myCode
   Definitions
      At line 1 in file ViterbiUpdate_asm.s
   Uses
      None
Comment: myCode unused
12 symbols
350 symbols in table
