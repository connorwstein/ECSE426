


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             myCode, CODE, READONLY
    2 00000000                 EXPORT           ViterbiUpdate_asm
    3 00000000         
    4 00000000         ;This function takes the following arguments
    5 00000000         ;R0 = A pointer to vitpsi[:,t-1]
    6 00000000         ;R1 = A pointer to vitpsi[:,t]
    7 00000000         ;R2 = The observation
    8 00000000         ;R3 = A pointer to the hmm variables
    9 00000000         ;The output is stored in vitpsi[:,t], the memory ADDSres
                       s of which is located at R1.
   10 00000000         
   11 00000000         ViterbiUpdate_asm
                               FUNCTION
   12 00000000 E92D 1FF0       PUSH{R4-R12}
   13 00000004 681C            LDR              R4, [R3]    ;load number of sta
                                                            tes
   14 00000006 F04F 0704       MOV              R7, #4      ;4 bytes
   15 0000000A         
   16 0000000A FB04 F904       MUL              R9, R4, R4  ;get to offset to e
                                                            mission ADDSress
   17 0000000E FB09 F907       MUL              R9, R7      ;get to offset to e
                                                            mission ADDSress
   18 00000012 F113 0608       ADDS             R6, R3, #8  ;load ADDSress of t
                                                            ransition
   19 00000016 EB16 0509       ADDS             R5, R6, R9  ;get ADDSress of em
                                                            ission
   20 0000001A         
   21 0000001A FB04 F807       MUL              R8, R4, R7  ;this is number of 
                                                            bytes times number 
                                                            of states
   22 0000001E FB02 FC07       MUL              R12, R2, R7 ;observation number
                                                             times number of by
                                                            tes
   23 00000022         
   24 00000022 F04F 3AFF       MOV              R10, #-1    ;this is the number
                                                             of states in the o
                                                            uter loop.
   25 00000026 EDDF 2A33       VLDR.F32         S5, =0.0    ;this stores the su
                                                            m of vit[t]
   26 0000002A         bigOuterLoop
   27 0000002A F11A 0A01       ADDS             R10, #1
   28 0000002E 45A2            CMP              R10, R4
   29 00000030 D048            BEQ              divideBySum
   30 00000032 EB10 0008       ADDS             R0,R8       ; ;reset ADDSress o
                                                            f vit[t-1]
   31 00000036 FB0A FB07       MUL              R11, R10, R7 ;amount needed to 
                                                            shift to correct co
                                                            lumn
   32 0000003A         getTransP
   33 0000003A F114 34FF       ADDS             R4, #-1
   34 0000003E 2C00            CMP              R4, #0
   35 00000040 DB0E            BLT              doneTransP
   36 00000042 ED30 0A01       VLDR.32          S0,[R0,#-4]! ;load vit[t-1]
   37 00000046 FB04 F908       MUL              R9, R4, R8  ; jump amount for t
                                                            ransition
   38 0000004A EB19 0906       ADDS             R9, R6      ;get ADDSress for n
                                                            ew position in tran
                                                            sition
   39 0000004E EB19 090B       ADDS             R9, R11     ;this shifts the AD



ARM Macro Assembler    Page 2 


                                                            DSress to the corre
                                                            ct column of transi
                                                            tion
   40 00000052 EDD9 0A00       VLDR.32          S1, [R9]    ;get the next value
                                                             in transition
   41 00000056 EE20 0A20       VMUL.F32         S0, S1      ;multiply the value
                                                            s
   42 0000005A ED2D 0A01       VPUSH{S0}                    ;store this value o
                                                            n the stack
   43 0000005E E7EC            B                getTransP
   44 00000060         doneTransP
   45 00000060 681C            LDR              R4, [R3]    ;reload number of s
                                                            tates
   46 00000062 ECFD 1A01       VPOP{S3}                     ;get trans_p[2]
   47 00000066 ED9F 1A23       VLDR.F32         S2, = 0.0   ;this will have the
                                                             index of the max v
                                                            alue.
   48 0000006A EDDF 0A22       VLDR.F32         S1, = 0.0   ;this will incremen
                                                            t by 1 at every loo
                                                            p iteration
   49 0000006E EEB7 0A00       VLDR.F32         S0, = 1.0   ;the amount to incr
                                                            ement by
   50 00000072         getMaxValue
   51 00000072 F114 34FF       ADDS             R4,#-1
   52 00000076 2C00            CMP              R4, #0
   53 00000078 D00D            BEQ              doneMaxValue
   54 0000007A ECBD 2A01       VPOP{S4}                     ;get trans_p elemen
                                                            ts
   55 0000007E EE70 0A80       VADD.F32         S1,S0       ;increment the coun
                                                            ter
   56 00000082 EEB4 2A61       VCMP.F32         S4,S3       ;compare this value
                                                             with current max v
                                                            alue
   57 00000086 EEF1 FA10       VMRS             APSR_nzcv, FPSCR
   58 0000008A DBF2            BLT              getMaxValue ;if the new number 
                                                            is less than the ma
                                                            x, go to beginning 
                                                            of loop
   59 0000008C EEF0 1A42       VMOV.F32         S3,S4       ;if the new number 
                                                            is greater than or 
                                                            equal, set that as 
                                                            the max.
   60 00000090 EEB0 1A60       VMOV.F32         S2, S1      ;also set the index
                                                             to the current loo
                                                            p counter
   61 00000094 E7ED            B                getMaxValue ;go to beginning of
                                                             loop
   62 00000096         doneMaxValue
   63 00000096 685C            LDR              R4, [R3,#4] ;load number of obs
                                                            ervation types
   64 00000098 FB04 F40B       MUL              R4, R11     ;number of observat
                                                            ion types times sta
                                                            te number times num
                                                            ber of bytes
   65 0000009C EB14 0905       ADDS             R9, R4, R5  ;get the ADDSress o
                                                            f the correct row o
                                                            f emission
   66 000000A0 EB19 090C       ADDS             R9, R12     ;shift to the corre
                                                            ct column. This req



ARM Macro Assembler    Page 3 


                                                            uires the observati
                                                            on input.
   67 000000A4 ED99 2A00       VLDR.32          S4, [R9]    ;load the emission 
                                                            entry
   68 000000A8 EE61 1A82       VMUL.F32         S3,S4       ;multiply the max v
                                                            alue by the emissio
                                                            n entry
   69 000000AC EE72 2AA1       VADD.F32         S5,S3       ;ADDS the value to 
                                                            the cumulative sum
   70 000000B0 EB11 090B       ADDS             R9, R1, R11 ;get ADDSress for n
                                                            ew position in vit
   71 000000B4 EDC9 1A00       VSTR             S3, [R9]    ;store the max valu
                                                            e in vit[s,t]
   72 000000B8 EB19 0908       ADDS             R9, R8      ;ADDSress for the c
                                                            orrect position in 
                                                            psi
   73 000000BC ED89 1A00       VSTR             S2, [R9]    ;store index in psi
                                                            
   74 000000C0 681C            LDR              R4, [R3]    ;reload the number 
                                                            of states
   75 000000C2 E7B2            B                bigOuterLoop ;go back to beginn
                                                            ing of big loop 
   76 000000C4         divideBySum
   77 000000C4 EEF5 2A40       VCMP.F32         S5, #0.0
   78 000000C8 EEF1 FA10       VMRS             APSR_nzcv, FPSCR
   79 000000CC D00F            BEQ              failure
   80 000000CE F114 34FF       ADDS             R4, #-1
   81 000000D2 2C00            CMP              R4, #0
   82 000000D4 DB06            BLT              doneDivision
   83 000000D6 EDD1 0A00       VLDR.32          S1, [R1]    ;get the value in v
                                                            it[:,t]
   84 000000DA EEC0 0AA2       VDIV.F32         S1,S5       ;divide the value b
                                                            y the scale factor
   85 000000DE ECE1 0A01       VSTR             S1, [R1], #4 ;store the value b
                                                            ack in vit[:,t]
   86 000000E2 E7EF            B                divideBySum
   87 000000E4         doneDivision
   88 000000E4 EBA1 0108       SUB              R1,R8
   89 000000E8 E8BD 1FF0       POP{R4-R12}
   90 000000EC 4770            BX               LR
   91 000000EE         failure
   92 000000EE F04F 32FF       MOV              R2, #-1
   93 000000F2                 ENDFUNC
   94 000000F2                 end
              00 00 00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\object\viterbiupdate_asm.d -o.\object\viterbiupdate_asm.o -I"
E:\McGill5\ECSE426\Lab 1\RTE" -I"E:\McGill5\ECSE426\Lab 1\RTE\Device\STM32F407V
G" -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.4.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Ke
il\STM32F4xx_DFP\1.0.8\Device\Include --predefine="__EVAL SETA 1" --predefine="
__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 516" --predefine="_RTE_ 
SETA 1" --predefine="STM32F40_41xxx SETA 1" --list=.\listings\viterbiupdate_asm
.lst ViterbiUpdate_asm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ViterbiUpdate_asm 00000000

Symbol: ViterbiUpdate_asm
   Definitions
      At line 11 in file ViterbiUpdate_asm.s
   Uses
      At line 2 in file ViterbiUpdate_asm.s
Comment: ViterbiUpdate_asm used once
bigOuterLoop 0000002A

Symbol: bigOuterLoop
   Definitions
      At line 26 in file ViterbiUpdate_asm.s
   Uses
      At line 75 in file ViterbiUpdate_asm.s
Comment: bigOuterLoop used once
divideBySum 000000C4

Symbol: divideBySum
   Definitions
      At line 76 in file ViterbiUpdate_asm.s
   Uses
      At line 29 in file ViterbiUpdate_asm.s
      At line 86 in file ViterbiUpdate_asm.s

doneDivision 000000E4

Symbol: doneDivision
   Definitions
      At line 87 in file ViterbiUpdate_asm.s
   Uses
      At line 82 in file ViterbiUpdate_asm.s
Comment: doneDivision used once
doneMaxValue 00000096

Symbol: doneMaxValue
   Definitions
      At line 62 in file ViterbiUpdate_asm.s
   Uses
      At line 53 in file ViterbiUpdate_asm.s
Comment: doneMaxValue used once
doneTransP 00000060

Symbol: doneTransP
   Definitions
      At line 44 in file ViterbiUpdate_asm.s
   Uses
      At line 35 in file ViterbiUpdate_asm.s
Comment: doneTransP used once
failure 000000EE

Symbol: failure
   Definitions
      At line 91 in file ViterbiUpdate_asm.s
   Uses
      At line 79 in file ViterbiUpdate_asm.s
Comment: failure used once
getMaxValue 00000072




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: getMaxValue
   Definitions
      At line 50 in file ViterbiUpdate_asm.s
   Uses
      At line 58 in file ViterbiUpdate_asm.s
      At line 61 in file ViterbiUpdate_asm.s

getTransP 0000003A

Symbol: getTransP
   Definitions
      At line 32 in file ViterbiUpdate_asm.s
   Uses
      At line 43 in file ViterbiUpdate_asm.s
Comment: getTransP used once
myCode 00000000

Symbol: myCode
   Definitions
      At line 1 in file ViterbiUpdate_asm.s
   Uses
      None
Comment: myCode unused
10 symbols
348 symbols in table
